---

layout: post
title:  "一起来排序"  
date:   2015-05-31 
tags: js

---
  
###前言

还记得大学里那本严蔚敏老奶奶的数据结构么，真心觉得数据结构和算法是大学为数不多课堂上学到的干货。可惜那会儿自己上课天天打酱油，这个后悔啊...而且现在也忘的差不多了，就记得个冒泡了...自己刚好有空，顺便复习下也是极好的，据说面试喜欢问ಥ_ಥ

<!--more-->

###冒泡排序
**通过相邻两个数组位之间的比较和交换，将当前子数组的最大值移动到数组的最右边**
[ 4, 2, 1, 5, 3 ]  
[ 2, 4, 1, 5, 3 ]  
[ 2, 1, 4, 5, 3 ]  
[ 2, 1, 4, 3, 5 ]  
[ 1, 2, 4, 3, 5 ]   
[ 1, 2, 3, 4, 5 ]     

````javascript
function bubbleSort(data) {
    for (var i = len; i >1; i--) {
        for (var j = 0 ; j < i; j++) {
            if (data[j] > data[j+1]) {
                swap(data, j, j+1)
            }
        }
    }
}
````

###选择排序
**每次比较选出当前这个子数组的最小并将其移动到数组的最左边**
[ 4, 2, 1, 5, 3 ]  
[ 1, 2, 4, 5, 3 ]  
[ 1, 2, 4, 5, 3 ]  
[ 1, 2, 3, 5, 4 ]   
  
````javascript
function selectSort(data) {
    for (var i = 0; i < len - 1; i++) {
        var min=i
        for (var j = i + 1; j < len;j++){
        	if(data[min]>data[j]){
                min=j;
        	}
        }
        if(min!=i){
            swap(data,i,min)
        }
    }
}
````

###插入排序
**从数组第二位开始与之前的所有数组位比较，将其插入比自己大的数组位左边**
[ 4, 2, 1, 5, 3 ]  
[ 2, 4, 1, 5, 3 ]  
[ 1, 2, 4, 5, 3 ]  
[ 1, 2, 4, 5, 3 ]  
[ 1, 2, 3, 4, 5 ]      

````javascript
function insertSort(data) {
    for (var i = 1; i < len; i++) {
    	var current=i,temp=data[i]
        while(current-1>=0&&data[current-1]>temp){
            data[current]=data[current-1]
            current--
        }
        data[current]=temp
    }
}
````


###希尔排序(插入排序高级版)
**通过shell进行了若干次插入排序，每次插入的间隔不同**  

````javascript
var shell=[5,2,1]  //shell值必须要有1 排序才能完成

function shellSort(data) {
    for(var g=0;g<shell.length;g++){
        var shellCode=shell[g]
        insertSort(data,shellCode)
    }
}
//插入排序的shellCode=1
function insertSort(data,shellCode) {
    for (var i = shellCode; i < len; i++) {
        var current=i,temp=data[i]
        while(current-shellCode>=0&&data[current-shellCode]>temp){
            data[current]=data[current-shellCode]
            current-=shellCode
        }
        data[current]=temp
    }
}
````


###快速排序
**分治思想,以每个数组第一个值为基准，分解成lesser和greater两个数组，并和基准合并起来。当数组不能再分解时返回空数组**
[ 4, 2, 1, 5, 3 ]  
[ 2, 1, 3 ],[ 5 ]  
[ 1 ]  
[ 3 ]   
  
````javascript
function fastSort(data) {
	if(data.length<=1){
		return []
	}
	var point=data[0],lesser=[],greater=[]
    for(var i=1;i<data.length;i++){
    	if(data[i]<point){
    		lesser.push(data[i])
    	}
    	else{
    		greater.push(data[i])
    	}
    }
    return fastSort(lesser).concat(point,fastSort(greater))
}
````

###题外话
* 可以测测上面几种排序算法的效率   
* Array提供的`sort()`排序，默认是基于字符串的比较，所以如果是数字数组，需要改写一下 
````
sort(function(a,b){
	return a-b
})
````   
据说这个sort方法v8是使用的改良过的快排,相当快
>v8's team is looking for stable sort, so that's why they use modified version of quick sort (neither quick sort nor heap sort are stable).

###参考
[数据结构与算法JavaScript描述](http://book.douban.com/subject/25945449/) 